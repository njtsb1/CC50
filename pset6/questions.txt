0. What is pneumoultramicroscopicosilicovulcanoconiosis?
A lung inflammation caused by inhaling volcanic ash.

1. According to your man page, what does getrusage do?
Get resource usage.

2. According to the same page, how many members does a variable of type struct rusage have?
16.

3. Why do you think we pass before and after by reference (rather than by value) to calculate, even though we aren't changing their contents?
Performance. Through its address, access the variables that are in the structure, which is faster than copying everything to new variables.

4. Explain as accurately as possible, in a paragraph or more, how main acts to read the words from a file. In other words, convince us that you really understand how this function's for loop works.
Get character from file. If it's a letter or apostrophe, put the character in word[], ignore if it's a number or greater than the limit, do it until the end of the word. Then end word with \0, update counter, check spelling, update benchmark, print word if it's incorrect, repeat until file runs out.

5. Why do you think we use fgetc to read every character of every word in turn instead of fscanf with a string formatted like "%s" to read whole words at once? In other words, what problems could arise when relying on fscanf to accomplish this task?
It would be more complicated to deal with words with numbers or greater than the limit.

6. Why do you think we declare so many const parameters in dictionary.c and dictionary.h?
Because the value of these variables will not be changed.

7. What data structure(s) did you use to implement your spell checker? Make sure you don't just answer "hash table", "trie", or something like that. Tell us a little about what is inside each of your "we".
A list-type structure and a hash table. An array of hash tables is created to point to lists that store dictionary words.

8. How slow was your code the first time you got it working?
It had a small difference compared to the final version.

9. What types of changes, if any, have you made to your code throughout the week (er, Thursday) in order to improve its performance?
Hash function replacement and variable optimizations.

10. Do you feel that your code has some heavy parts that you haven't been able to iron out?
Do not.
